# -*- coding: utf-8 -*-
# Generated by Django 1.11.22 on 2021-05-16 15:18
from __future__ import unicode_literals

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_fsm
import imagekit.models.fields
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Insurance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('added', models.DateField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='LabTest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', django_fsm.FSMIntegerField(choices=[(b'active', b'ACTIVE'), (b'in progress', b'IN PROGRESS'), (b'sent_to_provider', b'SENT_TO_PROVIDER'), (b'sent_to_pharmacy', b'SENT_TO_PHARMACY'), (b'ready_close', b'READY_TO_CLOSE')], default=1)),
                ('created', models.DateTimeField(default=datetime.datetime(2021, 5, 16, 18, 18, 45, 933000))),
                ('examination', models.TextField()),
                ('diagnosis', models.CharField(max_length=300)),
                ('slug', models.SlugField(max_length=200)),
            ],
            options={
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='MedicalInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('blood_type', models.CharField(choices=[(b'A+', b'A+ Type'), (b'B+', b'B+ Type'), (b'AB+', b'AB+ Type'), (b'O+', b'O+ Type'), (b'A-', b'A- Type'), (b'B-', b'B- Type'), (b'AB-', b'AB- Type'), (b'O-', b'O- Type')], max_length=10)),
                ('blood_pressure', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('allergy', models.CharField(max_length=100)),
                ('alzheimer', models.BooleanField(default=False)),
                ('asthma', models.BooleanField(default=False)),
                ('diabetes', models.BooleanField(default=False)),
                ('stroke', models.BooleanField(default=False)),
                ('comments', models.TextField(blank=True)),
                ('height', models.DecimalField(blank=True, decimal_places=2, default=0.0, max_digits=5)),
                ('weight', models.DecimalField(blank=True, decimal_places=2, default=0.0, max_digits=5)),
                ('chronic_disease', models.CharField(default=b'No', max_length=200)),
                ('drinker', models.BooleanField(default=False)),
                ('smoker', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='MedicalTest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('history', models.TextField(blank=True, default=b'History')),
                ('examination', models.TextField()),
                ('diagnosis', models.CharField(max_length=200)),
                ('ddx', models.CharField(max_length=200)),
                ('slug', models.SlugField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Obstetrics',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('examination', models.TextField()),
                ('diagnosis', models.TextField()),
                ('slug', models.SlugField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='ObstetricsImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to=b'')),
                ('medical_test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='obstetric_images', to='TabibuNet.Obstetrics')),
            ],
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('photo', imagekit.models.fields.ProcessedImageField(blank=True, upload_to=b'patients')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None)),
                ('email', models.EmailField(max_length=254)),
                ('gender', models.CharField(choices=[(b'male', b'MALE'), (b'female', b'FEMALE')], default=b'female', max_length=20)),
                ('address', models.CharField(max_length=100)),
                ('contact_person', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None)),
                ('location', models.CharField(max_length=100)),
                ('dob', models.DateField()),
                ('married', models.CharField(choices=[(b'no', b'NO'), (b'yes', b'YES')], default=b'no', max_length=20)),
                ('slug', models.SlugField(max_length=100)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('insurance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='patient', to='TabibuNet.Insurance')),
            ],
            options={
                'ordering': ('-added',),
            },
        ),
        migrations.CreateModel(
            name='Prescription',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(auto_now_add=True)),
                ('medication', models.CharField(max_length=100)),
                ('strength', models.CharField(max_length=30)),
                ('instruction', models.CharField(max_length=200)),
                ('refill', models.IntegerField()),
                ('active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Provider',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None)),
            ],
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('price', models.PositiveIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Visit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateTimeField(auto_now_add=True)),
                ('finish_date', models.DateTimeField(null=True)),
                ('status', django_fsm.FSMIntegerField(choices=[(b'reception', b'Reception'), (b'wait_for_provider', b'Wait_for_provider'), (b'provider', b'Provider'), (b'dental', b'Dental'), (b'wait_for_lab', b'Waiting_for_lab'), (b'lab', b'Lab'), (b'wait_for_pharmacy', b'Wait_for_pharmacy'), (b'pharmacy', b'Pharmacy'), (b'billing', b'Billing'), (b'ready_to_close', b'Ready_to_close'), (b'closed', b'Closed')], default=b'reception')),
                ('chief_complaints', models.CharField(max_length=300)),
                ('slug', models.SlugField(max_length=100)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='visit', to='TabibuNet.Patient')),
            ],
            options={
                'ordering': ('-start_date',),
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.ASCIIUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_nurse', models.BooleanField(default=False)),
                ('is_provider', models.BooleanField(default=False)),
                ('is_lab', models.BooleanField(default=False)),
                ('is_pharmacy', models.BooleanField(default=False)),
                ('is_dental', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='provider',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='prescription',
            name='visit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prescriptions', to='TabibuNet.Visit'),
        ),
        migrations.AddField(
            model_name='obstetrics',
            name='visit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Obs_Gyn', to='TabibuNet.Visit'),
        ),
        migrations.AddField(
            model_name='medicaltest',
            name='visit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medical_test', to='TabibuNet.Visit'),
        ),
        migrations.AddField(
            model_name='medicalinfo',
            name='patient',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='medical_info', to='TabibuNet.Patient'),
        ),
        migrations.AddField(
            model_name='labtest',
            name='medical_test',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lab_test', to='TabibuNet.Test'),
        ),
        migrations.AddField(
            model_name='labtest',
            name='visit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lab_test', to='TabibuNet.Visit'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='patient',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='appointment', to='TabibuNet.Patient'),
        ),
    ]
